// Generated by gencpp from file fake_sensor/Detect_fruitResponse.msg
// DO NOT EDIT!


#ifndef FAKE_SENSOR_MESSAGE_DETECT_FRUITRESPONSE_H
#define FAKE_SENSOR_MESSAGE_DETECT_FRUITRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fake_sensor/Point.h>

namespace fake_sensor
{
template <class ContainerAllocator>
struct Detect_fruitResponse_
{
  typedef Detect_fruitResponse_<ContainerAllocator> Type;

  Detect_fruitResponse_()
    : stamp()
    , frame_id()
    , success(false)
    , message()
    , points()  {
    }
  Detect_fruitResponse_(const ContainerAllocator& _alloc)
    : stamp()
    , frame_id(_alloc)
    , success(false)
    , message(_alloc)
    , points(_alloc)  {
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef std::vector< ::fake_sensor::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fake_sensor::Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;




  typedef boost::shared_ptr< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Detect_fruitResponse_

typedef ::fake_sensor::Detect_fruitResponse_<std::allocator<void> > Detect_fruitResponse;

typedef boost::shared_ptr< ::fake_sensor::Detect_fruitResponse > Detect_fruitResponsePtr;
typedef boost::shared_ptr< ::fake_sensor::Detect_fruitResponse const> Detect_fruitResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fake_sensor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'fake_sensor': ['/home/lyoder/Desktop/sandbox/src/fake_sensor/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "686cf6b37dc9c7b7e6b340f1d32ac529";
  }

  static const char* value(const ::fake_sensor::Detect_fruitResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x686cf6b37dc9c7b7ULL;
  static const uint64_t static_value2 = 0xe6b340f1d32ac529ULL;
};

template<class ContainerAllocator>
struct DataType< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fake_sensor/Detect_fruitResponse";
  }

  static const char* value(const ::fake_sensor::Detect_fruitResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
time stamp\n\
string frame_id\n\
bool success\n\
string message\n\
fake_sensor/Point[] points\n\
\n\
\n\
================================================================================\n\
MSG: fake_sensor/Point\n\
# This represents the position of a detected fruit and confidence\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 c\n\
";
  }

  static const char* value(const ::fake_sensor::Detect_fruitResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Detect_fruitResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fake_sensor::Detect_fruitResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fake_sensor::Detect_fruitResponse_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fake_sensor::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAKE_SENSOR_MESSAGE_DETECT_FRUITRESPONSE_H
