// Generated by gencpp from file fake_sensor/Detect_fiducialResponse.msg
// DO NOT EDIT!


#ifndef FAKE_SENSOR_MESSAGE_DETECT_FIDUCIALRESPONSE_H
#define FAKE_SENSOR_MESSAGE_DETECT_FIDUCIALRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fake_sensor
{
template <class ContainerAllocator>
struct Detect_fiducialResponse_
{
  typedef Detect_fiducialResponse_<ContainerAllocator> Type;

  Detect_fiducialResponse_()
    : stamp()
    , frame_id()
    , success(false)
    , message()
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }
  Detect_fiducialResponse_(const ContainerAllocator& _alloc)
    : stamp()
    , frame_id(_alloc)
    , success(false)
    , message(_alloc)
    , x(0.0)
    , y(0.0)
    , z(0.0)  {
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;




  typedef boost::shared_ptr< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Detect_fiducialResponse_

typedef ::fake_sensor::Detect_fiducialResponse_<std::allocator<void> > Detect_fiducialResponse;

typedef boost::shared_ptr< ::fake_sensor::Detect_fiducialResponse > Detect_fiducialResponsePtr;
typedef boost::shared_ptr< ::fake_sensor::Detect_fiducialResponse const> Detect_fiducialResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fake_sensor

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'fake_sensor': ['/home/lyoder/Desktop/sandbox/src/fake_sensor/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "850ccada049e5c8fdf273ce36ed58bbf";
  }

  static const char* value(const ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x850ccada049e5c8fULL;
  static const uint64_t static_value2 = 0xdf273ce36ed58bbfULL;
};

template<class ContainerAllocator>
struct DataType< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fake_sensor/Detect_fiducialResponse";
  }

  static const char* value(const ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
time stamp\n\
string frame_id\n\
bool success\n\
string message\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
\n\
";
  }

  static const char* value(const ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Detect_fiducialResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fake_sensor::Detect_fiducialResponse_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FAKE_SENSOR_MESSAGE_DETECT_FIDUCIALRESPONSE_H
